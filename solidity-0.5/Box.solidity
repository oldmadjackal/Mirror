pragma solidity ^0.5.0;

contract Box
{
    address   Owner ;
    address   DelegatedOwner ;
    uint256   StorageMode ;
    uint256   Version ;
    address[] Contracts ;
    uint256   Contracts_cnt ;
	
    mapping (address => bytes32) Banks ;
    uint256                      Banks_cnt ;

    event AddressAdded(address contract_); 
    event AddressDeleted(address contract_); 

    constructor() public 
    {
         Owner        =msg.sender ; 
         Banks_cnt    = 0 ;
         Contracts_cnt= 0 ;
         StorageMode  = 0 ;
         Version      = 1 ;
    }

//    function() payable {}

//=============== Self-Description Iface
//
// 0x55d93027
    function SD_Version() external pure returns (bytes32)
    {
       return("Askona 1.0") ;
    }

// 0x0d55e9f5
    function SD_Identify() external pure returns (bytes32)
    {
       return("Box.2023-06-12") ;
    }

//=============== Application Iface
//
// 0x49339f0f
    function Delegate(address  bank_) public
    {
          require(msg.sender == Owner);
          require(DelegatedOwner == address(0x0));
		  
		   DelegatedOwner=bank_ ;
    }

// 0x3c1cb948
    function SetStorageMode(uint256  mode_) public
    {
          require(msg.sender == Owner);
		  
		   StorageMode=mode_ ;
    }

// 0x77362a20
    function AddBank(address  bank_) public
    {
       require(msg.sender == Owner  || msg.sender == DelegatedOwner);
		
		  Banks[bank_]="Y" ;
		  Banks_cnt++ ;
    }

// 0x376e6cc2
    function CheckBank(address  bank_) public view returns (bytes32 retVal)
    {
          if(      bank_ ==         Owner)  return("Y") ;
          if(      bank_ ==DelegatedOwner)  return("Y") ;
          if(Banks_cnt   ==  0           )  return("Y") ;
          if(Banks[bank_]== "Y"          )  return("Y") ;
                                            return("N") ;
    }

// 0x552de325
    function AddContract(address contract_)  public
    {
      if(Banks_cnt!=0)
       require( msg.sender        == Owner          ||
                msg.sender        == DelegatedOwner ||
                Banks[msg.sender] == "Y"             );

      if(StorageMode==1)
      {
                       Contracts.length++ ;
             Contracts[Contracts.length-1]=contract_ ;

			           Contracts_cnt++ ;
      } 
			 
                             Version++ ;

          emit AddressAdded(contract_); 
    }

    function DeleteContract(address contract_) public
    {
        require(msg.sender == Owner || msg.sender == DelegatedOwner);
        uint256  i;
        uint256  j;

        if(StorageMode==1)
        {
        for(i=0 ; i < Contracts.length ; i++)
        {
            if(Contracts[i]==contract_) 
            {
                Contracts[i]= address(0x0) ;
                break ;
            }
        }
		Contracts_cnt-- ;
					   
    if(Contracts.length>Contracts_cnt+10)
       {
          j = 0 ;
          for(i = 0; i < Contracts.length; i++)
          {
            if(          i  != j )  Contracts[j]=Contracts[i] ;
            if(Contracts[j] != address(0x0))  j++ ;
          }

               Contracts.length=Contracts_cnt ;
       }

      } 

	    Version++;
        emit AddressDeleted(contract_); 
    }

// 0x34d01d61
    function CheckContract(address  contract_) public view returns (bytes32 retVal)
    {
           uint256 i;


      if(StorageMode==1)
      {
          for(i=0 ; i<Contracts.length ; i++)
            if(Contracts[i]==contract_)  return("Y") ;
      }
	  else
	  {
	                         return("E") ;
	  }
	  
	                         return("N") ;
    }

// 0x8040a5b8
    function GetContracts() public view returns (uint256, address[] memory retVal)
    {
		return(Version, Contracts) ; 
    }

// 0xa538bd90
    function Clear() public
    {
        require(msg.sender == Owner || msg.sender == DelegatedOwner);
        
        Contracts.length = 0;
        Contracts_cnt = 0;

        Version++;

        emit AddressDeleted(address(0x0)); 
    }

}
